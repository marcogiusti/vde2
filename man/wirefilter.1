.TH WIREFILTER 1 "December 6, 2006" "Virtual Distributed Ethernet"
.SH NAME
wirefilter \- Wire packet filter for Virtual Distributed Ethernet
.SH SYNOPSIS
.B wirefilter

[\fB\-f\fI rcfile\fR]
[\fB\-l\fI loss\fR]
[\fB\-l\fI lostburst\fR]
[\fB\-d\fI delay\fR]
[\fB\-D\fI dup\fR]
[\fB\-b\fI bandwidth\fR]
[\fB\-s\fI interface_speed\fR]
[\fB\-c\fI channel_bufsize\fR]
[\fB\-n\fI noise_factor\fR]
[\fB\-m\fI mtu_size\fR]
[\fB\-M\fI mgmt socket\fR]
[\fB\-v\fI vde_plug1:vde_plug2\fR]
[\fB\--daemon\fI]
[\fB\--pidfile\fI pidfile_path]
[\fB\--blink\fI blink]
[\fB\--blinkid\fI blink_identifier]
[\fB-N\fR]
.br
.SH DESCRIPTION
A
\fBwirefilter\fP 
is able to emulate delays and packet loss on virtual wires.
e.g.:

.B
dpipe vde_plug /tmp/s1 = wirefilter -l 10 = vde_plug /tmp/s2

creates a wire between two vde_switches (with sockets /tmp/s1 and /tmp/s2
respectively). This cable looses 10% of the packets in each direction.

The same cable can be created using:

.B
wirefilter -v /tmp/s1:/tmp/s2 -l 10

.SH OPTIONS
.TP
.B \-f "\fIrcfile\fP"
use a startup configuration file. It is useful for complex defitions
such as those for the Markov mode (see below).
The startup configuration file has the same syntax of the management
interface, in other word it is a script of management commands executed
before the first packet is forwarded.
.TP
.B \-l "\fIloss\fP"
percentage of loss as a floating point number. It is possible to specify
different loss percentage for the two channels: LR20.5 means 20.5% of packet
flowing left to right are lost, RL10 means 10% from right to left.
.TP
.B \-L "\fIlostburst\fP"
when this is not zero, wirefilter uses the Gilbert model for bursty errors.
This is the mean length of lost packet bursts. (it is a two state Markov
chain: the probability to exit from the faulty state is \fI1/lostburst\fP, the
probability to enter the faulty state is \fIloss/(lostburst-(1-loss))\fP. The
loss rate converges to the value \fIloss\fR.
.TP
.B \-d "\fIdelay\fP" 
Extra delay (in milliseconds). This delay is added to the
real communication delay.  Packets are temporarily stored and resent after the
delay.  It is possible to specify different values for LR and RL like in the
previous option.  When the delay is specified as two numbers with a + in
between, the first is the standard delay and the second is a random variation.
1000+500 means that the delay can be randomly chosen between half second and
1.5 seconds. It is possible to add 'U' or 'N' at the end. 1000+500U means that
the dealys are uniformly distributed, 1000+500N means that the delays follow
a Gaussian normal distribution (more than 98% of the values are inside the
limits).
.TP
.B \-D "\fIdup\fP"
percentage of dup packet. It has the same syntax of -l. Do not use dup factor 100% 
because it means that each packet is sent infinite times. 
.TP
.B \-b "\fIbandwidth\fP"
Channel bandwidth in Bytes/sec. It has the same syntax of -d. It is also possible to
use suffixes K,M,G to abbreviate 2^10, 2^20, 2^30.
128K means 128KBytes/sec. 128+64K means 64i to 196KBytes/sec.
Sender is not prevented from sending packets, delivery is delayed to limit the bandwidth
to the desired value. (Like a bottleneck along the path). The management of the queue depends
on -c, -A and -R parameters (see below).
U and N after the values (e.g. 128+64KN) set the statistic distribution to
use (uniform or normal). 
In order to use bits instead of Bytes, 'b' can be appended to the
value, so 64Kb means 64 kilobit per seconds. Please note that one Kbit=1000 bit, while
one KByte=1024 Bytes.
.TP

.B \-c "\fIchannel_bufsize\fP"
Channel buffer size (in Bytes): maximum size of the packet queue. Exceeding packets 
are discarded in a drop-tail policy.
.TP
.B \-R "\fIrmin,rmax,probability,limit\fP"
For packet waiting in the queue due to a bandwidth restriction, use Random Early Detection
policy for queue management. Parameters are the following:
.sp
.in +4n
.nf
\fImin\fP: Average queue size at which marking becomes a possibility.
\fImax\fP: At this average queue size, the marking probability is maximal. 
\fIprobability\fP: Maximum probability for marking, specified as a floating point number from 0.0 to 1.0. 
\fIlimit\fP: Hard limit on queue size in bytes. Further packets are dropped. 
.fi
.in
.sp
For more information about the algorithm see 
\fBtc-red\fP(8).
.TP
.B \-A
When used with 
.B -c
instead of discarding packets in drop-tail, 
mangle TCP acknowledgements in the opposite direction of the current flow,
so the advertised window field in the TCP options is zeroed, thus preventing
the TCP endpoint to inject new segments into the network. Works only on frames
containing TCP/IPv4 valid segments carrying the ACK flag.
.TP

.B \-n "\fInoise factor\fP"
Number of bits damaged/one megabyte. 
.TP
.B \-m "\fImtu size\fP"
Packets longer than mtu_size are discarded.
.TP
.B \-N 
nofifo. with -N packets can be reordered.
.TP
.B \-M "\fImgmt socket\fP" 
the unix socket where the parameters (loss percentage, delay etc) can be checked and
changed runtime. unixterm(1) can be used as a remote terminal for wirefilter.
.TP
.B \-v "\fIvde_plug1:vde_plug2\fP"
If this option is used, the two local vde_plugs (vde_plug1 and vde_plug2) will be connected each other instead of stdin/stdout,
using the libvdeplug libraries. This option activates an interactive 
management session on console (stdin/stdout).
.TP
.B \--mgmtmode "\fImode\fP" 
this option sets the access mode of the mgmt socket.
The command syntax is quite simple. \fBhelp\fR provides the
list of commands.
It is possible to load a script file using the \fBload\fR management command.
.TP
.B \--daemon\fP 
wirefilter becomes a daemon
.TP
.B \--pidfile "\fIpathnamefP"
wirefilter saves its pid into the  file.
.TP
.B \--blinkid "\fIname\fP"                       
This option defines the id sent for each packet to the blink server 
(see the --blink option below).
The stardard identifier for a wirefilter is the process pid.
.TP
.B \--blink "\fIsocket\fP"        
wirefilter sends a log message to the specified PF_UNIX/DATAGRAM socket 
for each packet sent. Each packet has the format: id direction length.
e.g:
.sp
.in +4n
.nf
6768 LR 44
6768 LR 44
6768 RL 100
6768 LR 100
6768 LR 44
.fi
.in
.sp
.SH Markov mode
wirefilter provides also a more complex set of parameters using a Markov
chain to emulate different states of the link and the tranistions between
states. Each state is represented by a node.
Markov chain parameters can be set with management commands or rc files only.
In fact, due to the large number of parameters the command line would have
been unreadable.
.TP
.B markov-numnodes "\fIn\fP"
defines the number of different states. All the parameters of the connection
can be defined node by node. Nodes are numbered starting from zero (to n-1).
e.g.:
.sp
.in +4in
.nf
delay 100+10N[4]
loss 10[2]
.fi
.in
.sp
these command define a delay of 90-110 ms (normal distribution) for the node
number 4 and a 10\% loss for the node 2.
It is possible to resize the Markov chain at run-time.
New nodes are unreachable and do not have any edge to other states (i.e.
each new node has a loopback edge to the node itself with 100% probability).
When reducing the number of nodes, the weight of the edges towards deleted
nodes is added to the loopback edge. When the current node of the 
emulation is deleted, node 0 becomes the current node.
(The emulation always starts from node 0).
.TP
.B markov-time "\fIms\fP"
time period (ms) for the markov chain computation. Each \fIms\fR microseconds
a random number generator decides which is the next state (default value=100ms).
.TP
.B markov-name "\fIn,name\fP"
assign a name to a node of the markov chain. 
.TP
.B markov-setnode "\fIn\fP"
manually set the current node to the node \fIn\fP.
.TP
.B setedge "\fIn1,n2,w\fP"
define an edge between \fIn1\fR and \fIn2\fR; \fIw\fR is the weight (probability percentage)
of the edge.
The loopback edge (from a node to itself) is always computed as 100% minus
the sum of the weights of outgoing edges.
.TP
.B showedges [ "\fIn\fP" ]
list the edges from node \fIn\fP (or from the current node when the command
has no parameters). Null weight edges are omitted.
.TP
.B showcurrent
show the current Markov state.
.TP
.B showinfo [ \fIn\fP ]
show status and information on state (node)  \fIn\fP. 
If the parameter is omitted
it shows the status and information on the current state.
.TP
.B markov-debug [ \fIn\fP ]
set the debug level for the current management connection. 
In the actual implementation when n is greater than zero each
change of markov node causes the output of a debug trace.
Debug tracing get disabled when \fIn\fP is zero or the parameter is missing.
.SH NOTICE
Virtual Distributed Ethernet is not related in any way with
www.vde.com ("Verband der Elektrotechnik, Elektronik und Informationstechnik"
i.e. the German "Association for Electrical, Electronic & Information
Technologies").
.SH SEE ALSO
\fBvde_switch\fP(1),
\fBvdeq\fP(1).
\fBdpipe\fP(1).
\fBunixterm\fP(1).
\fBtc-red\fP(8).
.br
.SH AUTHOR
VDE is a project by Renzo Davoli <renzo@cs.unibo.it>
